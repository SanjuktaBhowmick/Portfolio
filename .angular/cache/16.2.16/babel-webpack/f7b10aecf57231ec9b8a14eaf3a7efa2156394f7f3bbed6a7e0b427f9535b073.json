{"ast":null,"code":"import { PROJECTS } from '../DATA/project-data';\nimport { PUBLICATIONS } from '../DATA/publication-data';\nimport * as i0 from \"@angular/core\";\nexport class DataService {\n  constructor() {\n    this.projects = PROJECTS;\n    this.publications = PUBLICATIONS;\n  }\n  // ************************************************************************\n  // * Get project ID\n  getProjectById(id) {\n    // * Find the project by ID, or return undefined if not found\n    return this.projects.find(project => project.id === id);\n  }\n  // ************************************************************************\n  // * Get all the publications for the project\n  getPublicationsForProject(projectID) {\n    const project = PROJECTS.find(p => p.id === projectID);\n    if (project && project.publicationIDs) {\n      return PUBLICATIONS.filter(publication => project.publicationIDs?.includes(publication.id));\n    }\n    return []; // Return an empty array if no publications are found\n  }\n  // ************************************************************************\n  // * Get the publications by id\n  // getPublications(): Observable<Publication[]> {\n  //   return of(this.publications);\n  // }\n  // ************************************************************************\n  //* Get a publication by ID\n  getPublicationById(id) {\n    const publication = this.publications.find(p => p.id === id);\n    return publication;\n  }\n  // ************************************************************************\n  //* Get all publications\n  getAllPublications() {\n    console.log('Get all publications' + JSON.stringify(this.publications));\n    return this.publications;\n  }\n  static {\n    this.ɵfac = function DataService_Factory(t) {\n      return new (t || DataService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DataService,\n      factory: DataService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["PROJECTS","PUBLICATIONS","DataService","constructor","projects","publications","getProjectById","id","find","project","getPublicationsForProject","projectID","p","publicationIDs","filter","publication","includes","getPublicationById","getAllPublications","console","log","JSON","stringify","factory","ɵfac","providedIn"],"sources":["/Users/kishankumarz/Documents/Sanjuktha_Bhowmick_Clone/Portfolio/src/app/services/data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Project } from '../model/project';\nimport { PROJECTS } from '../DATA/project-data';\nimport { PUBLICATIONS } from '../DATA/publication-data';\nimport { Publication } from '../model/publication';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DataService {\n  constructor() {}\n  private projects: Project[] = PROJECTS;\n  private publications: Publication[] = PUBLICATIONS;\n\n  // ************************************************************************\n  // * Get project ID\n  getProjectById(id: number): Project | undefined {\n    // * Find the project by ID, or return undefined if not found\n    return this.projects.find((project) => project.id === id);\n  }\n\n  // ************************************************************************\n  // * Get all the publications for the project\n  getPublicationsForProject(projectID: number): Publication[] {\n    const project = PROJECTS.find((p) => p.id === projectID);\n\n    if (project && project.publicationIDs) {\n      return PUBLICATIONS.filter((publication) =>\n        project.publicationIDs?.includes(publication.id)\n      );\n    }\n\n    return []; // Return an empty array if no publications are found\n  }\n\n  // ************************************************************************\n  // * Get the publications by id\n  // getPublications(): Observable<Publication[]> {\n  //   return of(this.publications);\n  // }\n\n  // ************************************************************************\n  //* Get a publication by ID\n  getPublicationById(id: number): Publication | undefined {\n    const publication = this.publications.find((p) => p.id === id);\n    return publication;\n  }\n\n  // ************************************************************************\n  //* Get all publications\n  getAllPublications() {\n    console.log('Get all publications' + JSON.stringify(this.publications));\n    return this.publications;\n  }\n}\n"],"mappings":"AAEA,SAASA,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,YAAY,QAAQ,0BAA0B;;AAOvD,OAAM,MAAOC,WAAW;EACtBC,YAAA;IACQ,KAAAC,QAAQ,GAAcJ,QAAQ;IAC9B,KAAAK,YAAY,GAAkBJ,YAAY;EAFnC;EAIf;EACA;EACAK,cAAcA,CAACC,EAAU;IACvB;IACA,OAAO,IAAI,CAACH,QAAQ,CAACI,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACF,EAAE,KAAKA,EAAE,CAAC;EAC3D;EAEA;EACA;EACAG,yBAAyBA,CAACC,SAAiB;IACzC,MAAMF,OAAO,GAAGT,QAAQ,CAACQ,IAAI,CAAEI,CAAC,IAAKA,CAAC,CAACL,EAAE,KAAKI,SAAS,CAAC;IAExD,IAAIF,OAAO,IAAIA,OAAO,CAACI,cAAc,EAAE;MACrC,OAAOZ,YAAY,CAACa,MAAM,CAAEC,WAAW,IACrCN,OAAO,CAACI,cAAc,EAAEG,QAAQ,CAACD,WAAW,CAACR,EAAE,CAAC,CACjD;;IAGH,OAAO,EAAE,CAAC,CAAC;EACb;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EACAU,kBAAkBA,CAACV,EAAU;IAC3B,MAAMQ,WAAW,GAAG,IAAI,CAACV,YAAY,CAACG,IAAI,CAAEI,CAAC,IAAKA,CAAC,CAACL,EAAE,KAAKA,EAAE,CAAC;IAC9D,OAAOQ,WAAW;EACpB;EAEA;EACA;EACAG,kBAAkBA,CAAA;IAChBC,OAAO,CAACC,GAAG,CAAC,sBAAsB,GAAGC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACjB,YAAY,CAAC,CAAC;IACvE,OAAO,IAAI,CAACA,YAAY;EAC1B;;;uBA5CWH,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAqB,OAAA,EAAXrB,WAAW,CAAAsB,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}